// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: speech/speech.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "speech/speech.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* speech_data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  speech_data_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* keyword_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_speech_2fspeech_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_speech_2fspeech_2eproto() {
  protobuf_AddDesc_speech_2fspeech_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "speech/speech.proto");
  GOOGLE_CHECK(file != NULL);
  speech_data_descriptor_ = file->message_type(0);
  static const int speech_data_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(speech_data, word_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(speech_data, confidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(speech_data, version_),
  };
  speech_data_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      speech_data_descriptor_,
      speech_data::internal_default_instance(),
      speech_data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(speech_data, _has_bits_),
      -1,
      -1,
      sizeof(speech_data),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(speech_data, _internal_metadata_));
  keyword_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_speech_2fspeech_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      speech_data_descriptor_, speech_data::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_speech_2fspeech_2eproto() {
  speech_data_default_instance_.Shutdown();
  delete speech_data_reflection_;
}

void protobuf_InitDefaults_speech_2fspeech_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  speech_data_default_instance_.DefaultConstruct();
  speech_data_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_speech_2fspeech_2eproto_once_);
void protobuf_InitDefaults_speech_2fspeech_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_speech_2fspeech_2eproto_once_,
                 &protobuf_InitDefaults_speech_2fspeech_2eproto_impl);
}
void protobuf_AddDesc_speech_2fspeech_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_speech_2fspeech_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023speech/speech.proto\"J\n\013speech_data\022\026\n\004"
    "word\030\001 \001(\0162\010.keyword\022\022\n\nconfidence\030\002 \001(\005"
    "\022\017\n\007version\030\003 \001(\005*L\n\007keyword\022\010\n\004NULL\020\000\022\014"
    "\n\010OK_SENSE\020\001\022\010\n\004STOP\020\002\022\n\n\006SNOOZE\020\003\022\t\n\005AL"
    "EXA\020\004\022\010\n\004OKAY\020\005", 175);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "speech/speech.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_speech_2fspeech_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_speech_2fspeech_2eproto_once_);
void protobuf_AddDesc_speech_2fspeech_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_speech_2fspeech_2eproto_once_,
                 &protobuf_AddDesc_speech_2fspeech_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_speech_2fspeech_2eproto {
  StaticDescriptorInitializer_speech_2fspeech_2eproto() {
    protobuf_AddDesc_speech_2fspeech_2eproto();
  }
} static_descriptor_initializer_speech_2fspeech_2eproto_;
const ::google::protobuf::EnumDescriptor* keyword_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return keyword_descriptor_;
}
bool keyword_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int speech_data::kWordFieldNumber;
const int speech_data::kConfidenceFieldNumber;
const int speech_data::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

speech_data::speech_data()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_speech_2fspeech_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:speech_data)
}

void speech_data::InitAsDefaultInstance() {
}

speech_data::speech_data(const speech_data& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:speech_data)
}

void speech_data::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&word_, 0, reinterpret_cast<char*>(&version_) -
    reinterpret_cast<char*>(&word_) + sizeof(version_));
}

speech_data::~speech_data() {
  // @@protoc_insertion_point(destructor:speech_data)
  SharedDtor();
}

void speech_data::SharedDtor() {
}

void speech_data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* speech_data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return speech_data_descriptor_;
}

const speech_data& speech_data::default_instance() {
  protobuf_InitDefaults_speech_2fspeech_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<speech_data> speech_data_default_instance_;

speech_data* speech_data::New(::google::protobuf::Arena* arena) const {
  speech_data* n = new speech_data;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void speech_data::Clear() {
// @@protoc_insertion_point(message_clear_start:speech_data)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(speech_data, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<speech_data*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(word_, version_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool speech_data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speech_data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .keyword word = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::keyword_IsValid(value)) {
            set_word(static_cast< ::keyword >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_confidence;
        break;
      }

      // optional int32 confidence = 2;
      case 2: {
        if (tag == 16) {
         parse_confidence:
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_version;
        break;
      }

      // optional int32 version = 3;
      case 3: {
        if (tag == 24) {
         parse_version:
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speech_data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speech_data)
  return false;
#undef DO_
}

void speech_data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speech_data)
  // optional .keyword word = 1;
  if (has_word()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->word(), output);
  }

  // optional int32 confidence = 2;
  if (has_confidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->confidence(), output);
  }

  // optional int32 version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:speech_data)
}

::google::protobuf::uint8* speech_data::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speech_data)
  // optional .keyword word = 1;
  if (has_word()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->word(), target);
  }

  // optional int32 confidence = 2;
  if (has_confidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->confidence(), target);
  }

  // optional int32 version = 3;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speech_data)
  return target;
}

size_t speech_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speech_data)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .keyword word = 1;
    if (has_word()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->word());
    }

    // optional int32 confidence = 2;
    if (has_confidence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->confidence());
    }

    // optional int32 version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void speech_data::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speech_data)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const speech_data* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const speech_data>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speech_data)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speech_data)
    UnsafeMergeFrom(*source);
  }
}

void speech_data::MergeFrom(const speech_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speech_data)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void speech_data::UnsafeMergeFrom(const speech_data& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_word()) {
      set_word(from.word());
    }
    if (from.has_confidence()) {
      set_confidence(from.confidence());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void speech_data::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speech_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void speech_data::CopyFrom(const speech_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speech_data)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool speech_data::IsInitialized() const {

  return true;
}

void speech_data::Swap(speech_data* other) {
  if (other == this) return;
  InternalSwap(other);
}
void speech_data::InternalSwap(speech_data* other) {
  std::swap(word_, other->word_);
  std::swap(confidence_, other->confidence_);
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata speech_data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = speech_data_descriptor_;
  metadata.reflection = speech_data_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// speech_data

// optional .keyword word = 1;
bool speech_data::has_word() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void speech_data::set_has_word() {
  _has_bits_[0] |= 0x00000001u;
}
void speech_data::clear_has_word() {
  _has_bits_[0] &= ~0x00000001u;
}
void speech_data::clear_word() {
  word_ = 0;
  clear_has_word();
}
::keyword speech_data::word() const {
  // @@protoc_insertion_point(field_get:speech_data.word)
  return static_cast< ::keyword >(word_);
}
void speech_data::set_word(::keyword value) {
  assert(::keyword_IsValid(value));
  set_has_word();
  word_ = value;
  // @@protoc_insertion_point(field_set:speech_data.word)
}

// optional int32 confidence = 2;
bool speech_data::has_confidence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void speech_data::set_has_confidence() {
  _has_bits_[0] |= 0x00000002u;
}
void speech_data::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000002u;
}
void speech_data::clear_confidence() {
  confidence_ = 0;
  clear_has_confidence();
}
::google::protobuf::int32 speech_data::confidence() const {
  // @@protoc_insertion_point(field_get:speech_data.confidence)
  return confidence_;
}
void speech_data::set_confidence(::google::protobuf::int32 value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:speech_data.confidence)
}

// optional int32 version = 3;
bool speech_data::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void speech_data::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
void speech_data::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
void speech_data::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 speech_data::version() const {
  // @@protoc_insertion_point(field_get:speech_data.version)
  return version_;
}
void speech_data::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:speech_data.version)
}

inline const speech_data* speech_data::internal_default_instance() {
  return &speech_data_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
